--
name: head
description: show the top n rows of the dataframe
keywords: head, top, first, rows, n
code: df.head(${1:5})
--
name: tail
description: show the bottom n rows of the dataframe
keywords: tail, bottom, last, rows, n
code: df.tail(${1:5})
--
name: info
description: show the info of the dataframe
keywords: info, information, data, frame, dataframe
code: df.info(verbose=${1:False})
--
name: index
description: show the index of the dataframe
keywords: index, indices, data, frame, dataframe
code: df.index
--
name: columns
description: show the columns of the dataframe
keywords: columns, cols, data, frame, dataframe
code: df.columns
--
name: dtypes
description: list the dtypes of the dataframe
keywords: dtypes, data, types, frame, dataframe
code: df.dtypes
--
name: shape
description: show the shape of the dataframe
keywords: shape, data, frame, dataframe
code: df.shape
--
name: describe
description: show a quick statistic summary of the dataframe
keywords: describe, summary, statistics, stats, data, frame, dataframe
code: df.describe(percentiles=${1:None}, include=${2:None}, exclude=${3:None}, datetime_is_numeric=${4:False})
--
name: transpose
description: transpose the dataframe
keywords: transpose, transposed, data, frame, dataframe
code: df.T
--
name: sort index
description: "sort the index of the dataframe.
axis: 0 is rows, axis 1 is columns.
ascending: True sorts in ascending order, False sorts in descending order.
na_position: 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.
ignore_index: True does not sort the index, False sorts the index.
key: function to use for sorting the index.
inplace: True modifies the dataframe, False returns a copy of the dataframe."
keywords: sort, index, indices, data, frame, dataframe
code: df.sort_index(axis=${1:0}, ascending=${2:True}, inplace=${3:True}, kind=${4:'quicksort'}, na_position=${5:'last'}, ignore_index=${6:False}, key=${7:None}, inplace=${8:False})
--
name: sort values
description: "sort the values of the dataframe
by: columns to sort by
axis: 0 is rows, axis 1 is columns.
ascending: True sorts in ascending order, False sorts in descending order.
na_position: 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.
ignore_index: True does not sort the index, False sorts the index.
key: function to use for sorting the index.
inplace: True modifies the dataframe, False returns a copy of the dataframe."
keywords: sort, values, data, frame, dataframe
code: df.sort_values(by=${1:columns}, axis=${2:0}, ascending=${3:True}, inplace=${4:True}, kind=${5:'quicksort'}, na_position=${6:'last'}, ignore_index=${7:False}, key=${8:None})
--
name: select row slice
description: select a slice of the dataframe matching the given rows
keywords: select, slice, rows, data, frame, dataframe
code: df[${1:0}:${2:10}]
--
name: select columns
description: select a slice of the dataframe matching the given columns
keywords: select, columns, data, frame, dataframe
code: df.loc[:, ${1:columns}]
--
name: select rows and columns
description: select a slice of the dataframe matching the given rows and columns
keywords: select, slice, rows, columns, data, frame, dataframe
code: df.loc[${1:0}:${2:10}, ${3:columns}]
--
name: select rows by integer location
description: select a slice of the dataframe via the position of the passed integers
keywords: select, slice, rows, data, frame, dataframe
code: df.iloc[${1:0}:${2:10}]
--
name: select rows and columns by integer location
description: select a slice of the dataframe via the position of the passed integers
keywords: select, slice, rows, columns, data, frame, dataframe
code: df.iloc[${1:0}:${2:10}, ${3:columns}]
--
name: select rows by boolean vector
description: select a slice of the dataframe via the boolean vector
keywords: select, slice, rows, data, frame, dataframe
code: df[${1:df['column'] == 'value'}]
--
name: reindex
description: "change the index of the dataframe, this allows you to change/add/delete the index on a specified axis
index: new sequence to use as index
columns: new sequence to use as columns
fill_value: value to use for missing values
method: method to use for filling holes in reindexed DataFrame: none, 'pad'/'ffill', 'backfill'/'bfill', 'nearest'
copy: return a new object, even if the passed indexes are the same
level: broadcast across a level, matching Index values on the passed MultiIndex level
limit: maximum number of consecutive elements to forward or backward fill
tolerance: maximum distance between original and new labels for inexact matches. The values of the index at the matching locations most satisfy the equation abs(index[indexer] - target) <= tolerance."
keywords: reindex, index, indices, data, frame, dataframe
code: df.reindex(index=${1:df.index}, columns=${2:None}, fill_value=${3:None}, method=${4:None}, copy=${5:True}, level=${6:None}, limit=${7:None}, tolerance=${8:None})
--
name: drop
description: "drop specified labels from rows or columns
labels: single label or list-like
axis: 0 is rows, axis 1 is columns
inplace: True modifies the dataframe, False returns a copy of the dataframe"
keywords: drop, labels, data, frame, dataframe
code: df.drop(labels=${1:None}, axis=${2:0}, inplace=${6:True})
--
name: drop missing values
description: "drop rows or columns with missing values
axis: Determines if rows or columns are removed. 0 is rows, axis 1 is columns.
how: Determines if row or column is removed when we have at least one NA or all NA. 'any' removes the row/column if any NA values are present. 'all' removes the row/column if all values are NA.
inplace: True modifies the dataframe, False returns a copy of the dataframe"
keywords: dropna, na, missing, values, data, frame, dataframe
code: df.dropna(axis=${1:0}, how=${2:'any'}, inplace=${5:True})
--
name: fill missing values with value
description: "fill NA/NaN values using the specified method
value: scalar, dict, Series, or DataFrame
inplace: True modifies the dataframe, False returns a copy of the dataframe"
keywords: fillna, na, missing, values, data, frame, dataframe
code: df.fillna(value=${1:None}, inplace=${4:True})
--
name: forward fill missing values
description: "fill NA/NaN values using the previous value
axis: 0 is rows, axis 1 is columns
inplace: True modifies the dataframe, False returns a copy of the dataframe"
keywords: fillna, na, missing, values, data, frame, dataframe
code: df.ffill(axis=${2:0}, inplace=${3:True})
--
name: backward fill missing values
description: "fill NA/NaN values using the next value
axis: 0 is rows, axis 1 is columns
inplace: True modifies the dataframe, False returns a copy of the dataframe"
keywords: fillna, na, missing, values, data, frame, dataframe
code: df.bfill(axis=${2:0}, inplace=${3:True})
--
name: is na
description: detect missing values
keywords: is, na, missing, values, data, frame, dataframe
code: pd.isna(df)
--
name: mean of columns
description: compute the mean of the values for the each column
keywords: mean, average, data, frame, dataframe
code: df.mean(numeric_only=${1:True})
--
name: mean of rows
description: compute the mean of the values for the each row
keywords: mean, average, data, frame, dataframe
code: df.mean(axis=${1:1}, numeric_only=${1:True})
--
name: median of columns
description: compute the median of the values for the each column
keywords: median, data, frame, dataframe
code: df.median(numeric_only=${1:True})
--
name: median of rows
description: compute the median of the values for the each row
keywords: median, data, frame, dataframe
code: df.median(axis=${1:1}, numeric_only=${1:True})
--
name: value counts
description: compute the counts of unique values
keywords: value, counts, data, frame, dataframe
code: df.value_counts()
--